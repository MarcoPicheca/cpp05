{Bureaucrat ex01}
- [x] dare qualcosa da fare ai burocrati
- [x] creare una classe Form:
		[x] membri privati:
			. const name
			. bool is_signed (a costruzione sara' falso)
			. const required_to_sign
			. const required_to_execute

		[x] i grade seguiranno le stesse regole dei burocrati (1 - 150)
			quindi ci saranno in questa classe le stesse eccezioni
		
		[x] vanno scritti tutti i getter per tutti gli attributi privati

		[x] aggiungere una funzione membro 'beSigned()' che prende un
			burocrate come parametro. Questa dovra' cambiare lo stato
			di is_signed se il grade del burocrate e' piu' grande del required
			to sign. Se il voto e' troppo basso allora parte l'exception

		[x] crea la funzione membro 'signForm()' questa dovrebbe chiamare
			Form::beSign() per tentare di firmare il form. Se il form 
			e' firmato con successo allora vine stampato qualcosa come:
				<bureaucrat> signed <form>

			senno':
				<bureaucrat> couldnâ€™t sign <form> because <reason>.
		
		[x] non dimenticare l'orthodoxal form


{Bureaucrat ex02}
- [x] AForm e' una classe astratta costruita sulla base di Form
		[x] tenere a mente che gli attributi devono rimanere privati

QUESTE SONO CLASSI DERIVATE DA FORM

- [x] creare la classe ShrubberyCreationForm
		[x] grade rchiesti
			1. require to sign = 145
			2. require to exec = 137
			3. la classe crea un file <target>_shrubbery con un metodo nella cwd e scrivici
				ASCII trees (da vedere che sono)
			4. come argomento del costruttore hanno un solo argomento
				il <target>
			5. controllare che il form sia sign (firmato) e che i grade
				siano alti abbastanza

- [x] creare una classe RobotomyRequestForm
		[x] grade rchiesti
			1. require to sign = 72
			2. require to exec = 45
			3. (da subject) fa un po' di rumore, poi infoma che  <target>
				e' stato robotomizzato con successo il 50% delle volte.
				Altrimenti, ti informa che la robotomizzazione e' fallita
			4. come argomento del costruttore hanno un solo argomento
				il <target>
			5. controllare che il form sia sign (firmato) e che i grade
				siano alti abbastanza

- [x] creare una classe PresidentialPardonForm
		[x] grade rchiesti
			1. require to sign = 25
			2. require to exec = 5
			3. T'informa che il <target> e' stato perdonato da Zaphod Beeblebrox
			4. come argomento del costruttore hanno un solo argomento
				il <target>
			5. controllare che il form sia sign = 1 (firmato) e che i grade
				siano alti abbastanza, senno lancia (throw) exception

- [x] implementazioni classe Form  base:
		[x] aggiungere la funzione virtual execute(Bureaucrat const & executor) const

		[x] implementa una funzione che esegua le azioni dei form delle
			classi concrete.

- [x] implementazioni nella Bureaucrat class :
		[x] executeForm(AForm const & form) const = 0 questa
			dovebbe tentare di eseguire il form.
			In caso di successo stampa qualcosa come:
				<bureaucrat> executed <form>
			if not stampa un messaggio di errore

{Bureaucrat ex03}
- [ ] Creare una classe intern che non ha alcun membro privato ma solo member function:
		- [ ] makeForm() per fare il lavoro del burocrate, prende due stringhe:
				1. il nome di un Form (ShrubberyCreationForm
					, RobotomyRequestForm, PresidentialPardonForm)
				2. il target del Form
				3. ritorna un AForm*
				4. dovrebbe stampare 'Intern creats <form>'
					NB. se il nome del form non esiste -> errore